#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <pcap.h>
#define SIZE_ETHERNET 14
#define ETHER_ADDR_LEN  6

/*
libpcapのサンプル
ubuntuとかdebianのひとは
libpcap0.8-dev をapt-getとかで入れる
コンパイルするときはライブラリでpcapを指定する
gcc for_cpsf.c -lpcap
詳しくはここにかいてあるので宛先が80番ポートのTCPパケットだけ表示するプ

ログラムを書いてください\\
．
*/

//イーサネットヘッダ
struct struct_ethernet {
        u_char  ether_dhost[ETHER_ADDR_LEN];
        u_char  ether_shost[ETHER_ADDR_LEN];
        u_short ether_type;
};


//ip header
  u_char ip_vhl; // version  4bit & head 4bit
  u_char ip_tos; //service  8bit
  u_short ip_len;//packet length
  u_short ip_id;//識別子
  u_short ip_off;//fragemnet offset   16bit
#define IP_RF 0x8000   //unuse frag  =0
#define IP_DF 0x4000   //dontdevide frag
#define IP_MF 0x2000   //more fragments
#define IP_OFFMASK 0x1fff   //fragement bit mask
  u_char ip_ttl;//time to live time  8bit
  u_char ip_p;//protocol  8bit
  u_short ip_sum;//checksum  16bit
   struct in_addr ip_src,ip_dst; //source and det address
};

#define IP_HL(ip)  (((ip)->ip_vhl)& 0x0f)
#define IP_V(ip)   (((ip)->ip_vhl) >> 4)

//tcp header
struct struct_tcpheader{
  u_short th_sport;//source port  16bit
  u_short th_dport;//det port   16bit
  tcp_seq th_seq;//sequence number  32bit
  tcp_seq th_ack;//check answer number  32bit
  u_char th_offx2;//date offset & 予約 bit  4bit & 6bit
#define TH_OFF(th) (((th)->th_offx2 & 0xf0 >> 4)
  u_char th_flags;   //1bit
#define TH_FIN 0x01
#define TH_SYN 0x02
#define TH_RST 0x04
#define TH_PUSH 0x08
#define TH_ACK 0x10
#define TH_URG 0x20
#define TH_ECE 0x40
#define TH_CWR 0x80
#define TH_FLAGS (TH_FIN|TH_SYN|TH_RST|TH_ACK|TH_URG|TH_ECE|TH_CWR)
  u_short th_win;//windsize  16bit
  u_short th_sum;//checksum  16bit
  u_short th_urp;//urgence pointer  16bit
};

main(int argc, char *argv[]) {   //(kosuu , program name[hairetu])
        pcap_t *pd;
        int snaplen = 64;
    int pflag = 0;
    int timeout = 1000;
    char ebuf[PCAP_ERRBUF_SIZE];
    bpf_u_int32 localnet, netmask;
    pcap_handler callback;
    void print_ethaddr(u_char *, const struct pcap_pkthdr *, const 

u_char *packet);
    struct bpf_program;

        //macならen0とかubuntuならeth1とか
    if ((pd = pcap_open_live("en1", snaplen, !pflag, timeout, ebuf)) == 

NULL) {
                exit(1);
    }

        if (pcap_lookupnet("en1", &localnet, &netmask, ebuf) < 0) {
                exit(1);
    }
callback = print_ethaddr;
    if (pcap_loop(pd, -1, callback, NULL) < 0) {
                exit(1);
    }
        pcap_close(pd);
        exit(0);
}

        const struct struct_ethernet *eh;
        const struct struct_ip *ip;
        const struct struct_tcp *tcp;

        u_int size_ip;
        u_int size_tcp;
        eh = (struct struct_ethernet *)(packet);
        ip = (struct struct_ip *)(packet + SIZE_ETHERNET);
        size_ip = IP_HL(ip)*4;
        tcp = (struct struct_tcp *)(packet + SIZE_ETHERNET + size_ip);
        size_tcp = TH_OFF(tcp)*4;
        int i;

        //送信元MACアドレス
    for (i = 0; i < 6; ++i) {
                printf("%02x", (int)eh->ether_shost[i]);
                if(i < 5){
                        printf(":");
                }
        }
    printf(" -> ");

         //送信先MACアドレス
for (i = 0; i < 6; ++i) {
                printf("%02x", (int)eh->ether_dhost[i]);
                if(i < 5){
                        printf(":");
                }
        }
        printf("\n");

        //ip adress
        printf(" From: %s\n", inet_ntoa(ip->ip_src));
        printf(" To: %s\n", inet_ntoa(ip->ip_dst));
}
